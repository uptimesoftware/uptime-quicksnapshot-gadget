<?xml version="1.0" encoding="UTF-8"?>
<Module>
	<ModulePrefs title="QuickSnapshot Gadget" description="Use this gadget to easily display the QuickSnapshot view for an Element in your own custom dashboards." thumbnail="QuickSnapShotThm.png"/>
	<gadget_version>
		1.3
	</gadget_version>
	<grid_info>
		<supported_versions>
			7.3,7.4,7.5,7.6,7.7,7.8,7.9
		</supported_versions>
		<supported_platforms>
			windows,linux
		</supported_platforms>
		<requires_agent_scripts>
			false
		</requires_agent_scripts>
		<upgrade_in_place>
			true
		</upgrade_in_place>
	</grid_info>
	<Content type="html">
	<![CDATA[
	<link href="/styles/chosen/chosen.css?v=1.3" rel="stylesheet" type="text/css" />
	<style scoped="scoped">
		div {
			font-family: Verdana, Arial, Helvetica, sans-serif;
			font-size: 9px;
		}
		#error {
			padding: 5px;
			display: none;
			width: 100%;
			margin-left: auto;
			margin-right: auto;
		}
		#dest-body {
			background-image: url("__UPTIME_GADGET_BASE__/spinner.gif");
			background-position: 5px 5px;
			background-repeat: no-repeat;
			width: 100%;
		}
		#title {
			font-size: 16px;
			font-weight: bold;
		}
		#edit {
			padding: 5px;
			display: none;
			width: 100%;
			height: 100%;
		}
		input[type=text],label,select,button {
			max-width: 300px;
			margin-bottom: 3px;
			display: block;
			clear: both;
		}
		select {
			width: 180px;
		}
		input[type=text] {
			width: 100%;
		}
		#eg {
			color: rgba(0, 0, 0, 0.5);
		}
		#refreshInterval {
			padding-left: 6px;
			display: none;
		}
		#minutePlural {
			display: none;
		}
	</style>
	<div id="error"></div>
	<div id="dest">
		<div id="dest-header">
			<h1 id="title"></h1>
		</div>
		<div id="dest-body">
		</div>
	</div>
	<div id="edit">
		<div id = "availableEntities">
			<label for="elementEntityId">Element:</label>
			<select id="elementEntityId">
				<option value="-1">Loading...</option>
			</select>
			</div>
		<div id = "availableMetricTypes">
			<label for"metricType">Metric Type:</label>
			<select id="metricType">
				<option value="-1">Select an Element</option>
			</select>
		</div>
		<label for="show_title">Show Title:</label>
		<select id="show_title">
			<option value="no">no</option>
			<option value="yes">yes</option>
		</select>
		<label for="scroll">Scroll bars:</label>
		<select id="scroll">
			<option value="auto">Auto</option>
			<option value="yes">Always</option>
			<option value="no">Never</option>
		</select>
		<label for="refreshRate">Refresh Rate:</label>
		<select id="refreshRate" name="refreshRate">
			<option value="30">30s</option>
			<option value="60">1m</option>
			<option value="300">5m</option>
			<option value="600">10m</option>
			<option value="900">15m</option>
			<option value="3600">1h</option>
			<option value="-1">Never</option>
		</select>
		<button id="save">Save</button>
	</div>
	#includeResources(jquery)
	<script type="text/javascript" src="__UPTIME_GADGET_BASE__/apiQueries.js?v=1.3"></script>
	<script type="text/javascript" src="/ajax/chosen.jquery.min.js?v=1.3"></script>
	<script>
		function entitySort(arg1, arg2) {
			return naturalSort(arg1.name, arg2.name);
		}

		function populateIdSelector(selected_EntityId) {
			var api = new apiQueries();


	    	$('#elementEntityId').empty().append($("<option />").val(-1).text("Loading..."));
	    	$("#elementEntityId").trigger("liszt:updated");

	        return api.getAllElements().then(function(entities) {
	            // fill in element drop down list
	            entities.sort(entitySort);
	            var entitySelector = $('#elementEntityId').empty();
	            var hasMyInfrastructure = false;
	            $.each(entities, function() {
	            	if (this.type == "Server" && this.isMonitored === true)
	            	{
	                	entitySelector.append($("<option />").val(this.id).text(this.name));
	                }
	            });
	          
	            if (selected_EntityId > 0) 
	            {
	                $('#elementEntityId').val(selected_EntityId);
	                populateMetricTypeSelector(selected_EntityId);
	            }
	            
	            $("#elementEntityId").trigger("liszt:updated");
	            
	            

        	});
    	}

    	function populateMetricTypeSelector(selected_EntityId) {
    		var api = new apiQueries();
	        $('#metricType').empty().append($("<option />").val(-1).text("Loading..."));
	        $("#metricType").trigger("liszt:updated");

	    	return api.getElements(selected_EntityId).then(function(entity_details) {
		    			
		    			//lets check if the element has a PPG monitor
		    			var metricTypeSelector = $("#metricType").empty();
		    			var hasPPG = false;
		    			
		    			$.each (entity_details.monitors, function() {
		    				if (this.name == "Platform Performance Gatherer")
		    				{
		    					hasPPG=true;
		    				}
		    			});

		    			metricTypeSelector.append($("<option />").val("VirtualMachineAgentWmiQuickSnapshot").text("VM Metrics"));
		    			if ( hasPPG )
		    			{
		    				metricTypeSelector.append($("<option />").val("SysStatus").text("Agent Metrics"));
		    				metricTypeSelector.val("SysStatus");

		    			}

		    			$("#metricType").trigger("liszt:updated");
		    			

		    });
		}

		function editSettings(settings) {
			$("#save").prop("disabled", false);
			$("#error").empty().slideUp();
			$("#dest").hide();
			$("#edit").show();
			$('#metricType').chosen();
			$('#elementEntityId').chosen();
			$("#scroll").val(settings ? settings.scroll : "auto");
			$("#scroll").chosen();
			if (settings && settings.refreshInterval) {
				$("#refreshRate").val(settings.refreshInterval);
			} else {
				$("#refreshRate").val(-1);
			}

			$("#refreshRate").chosen();

			$("#show_title").val(settings ? settings.show_title : "no");
			$("#show_title").chosen();
			var selected_EntityId = -1;
			if (settings && settings.EntityId)
			{
				selected_EntityId = settings.EntityId;
			}
			return populateIdSelector(selected_EntityId).then(function() {
				null;
		}, function(error) {
			displayStatusBar(error, "Error Loading the List of Elements from Uptime Controller");
		});
		}

		function updateTitle(entity_id) {
			var title = $("#title");
			var api = new apiQueries();
			return api.getElements(entity_id).then(function(entity) {
				var name = entity.name;	
				title.html(name);
			});
		}

		function doRender(settings) {
			
			$("#dest").show();
			var dest = $("#dest-body");
			if (settings && settings.iframeUrl) {
				if (settings.show_title === "yes") {
					updateTitle(settings.EntityId);
					$("#dest-header").show();
				}
				else
				{
					$("#dest-header").hide();
				}
				$("#edit").hide();
				dest.empty()
						.css("background-position", "-9999px -9999px")
						.append($('<iframe id="frame"></iframe>')
						.prop("src", settings.iframeUrl)
						.prop("scrolling", settings.scroll)
						.height(dest.data("dimensions").height)
						.width(dest.data("dimensions").width))
						.show();
				if (settings.refreshInterval && settings.refreshInterval > 0) {
					dest.data("interval", setInterval(function() {
						$("#frame").prop("src", settings.iframeUrl);
					}, settings.refreshInterval * 1000));
				}
			} else {
				editSettings(settings);
			}
		}

		function doError(status) {
			$("#error").empty();
			uptimeErrorFormatter.getErrorBox(status, "Error communicating with Uptime").appendTo('#error');
			$("#error").slideDown();
			$("#save").prop("disabled", false);
		}


		$("#save").click(function() {
			$(this).prop("disabled", true);
			var settings = {
				EntityId: $('#elementEntityId').val(),
				MetricType: $('#metricType').val(),
				scroll: $("#scroll").val(),
				show_title: $("#show_title").val()
			};

			base_url = "/main.php?section=" + settings.MetricType + "&displaytab=1&active=s_pollAgent&etype=6&";

			settings.iframeUrl = base_url + "&id=" + settings.EntityId;
			settings.refreshInterval = $("#refreshRate").val();
			if (!settings.EntityId) {
				$("#error").empty();
				uptimeErrorFormatter.getErrorBox("Please select an Element").appendTo('#error');
				$("#error").slideDown();
				$("#save").prop("disabled", false);
			} else if (!settings.MetricType) {
				$("#error").empty();
				uptimeErrorFormatter.getErrorBox("Please select a Metric Type").appendTo('#error');
				$("#error").slideDown();
				$("#save").prop("disabled", false);

			} else {
				$("#error").empty().slideUp();
				uptimeGadget.saveSettings(settings).then(doRender, doError);
			}
		});

		$("#elementEntityId").on('change', function(evt, params) {
	    	var entityId = $('#elementEntityId').val();
	    	$("#metricType").empty();
	    	if (entityId >= 1)
	    	{
	    		return populateMetricTypeSelector(entityId).then(function() {
	    			null;
	    		}, function(error) {

	    		});
	    		
	    	}
    	});

		uptimeGadget.registerOnResizeHandler(function(dimensions) {
			$("#frame").height(dimensions.height).width(dimensions.width);
			$("#dest-body").data("dimensions", dimensions);
		});

		uptimeGadget.registerOnEditHandler(function() {
			$("#edit").hide();
			var dest = $("#dest-body");
			var interval = dest.data("interval");
			if (interval) {
				clearInterval(interval);
			}
			dest.empty()
				.removeData("interval")
				.css("background-position", "5px 5px")
				.show();
			uptimeGadget.loadSettings().then(function(settings) {
				editSettings(settings);
			});
		});

		uptimeGadget.registerOnLoadHandler(function(onLoadData) {
			$("#dest-body").data("dimensions", onLoadData.dimensions);
			if (onLoadData.hasPreloadedSettings()) {
				doRender(onLoadData.settings);
			} else {
				uptimeGadget.loadSettings(doRender, doError);
			}
		});
	</script>
	]]>
	</Content>
</Module>
